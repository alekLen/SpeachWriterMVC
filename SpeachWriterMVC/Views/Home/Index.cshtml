@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Добро пожаловать в  SpeachWriter </h1>

    <button id="requestMicrophoneAccess">Разрешите доступ к микрофону</button>
    <button id="cancelMicrophoneAccess">Запретить доступ к микрофону</button>
</div>

<p id="status">Микрофон отключен.</p>
@model SpeachWriterMVC.Models.MyText

<p>@Model.text</p>

<button id="startRecording" onclick="startRecording()" disabled="true">Начать запись</button>
<button id="stopRecording" onclick="stopRecording()" disabled="true">Остановить запись</button>

<h3 id="speach"></h3>


<script src="js/recorder.js"></script>
@* <script>
    let recorder;
    let audioChunks = [];

    document.getElementById('requestMicrophoneAccess').addEventListener('click', () => {

    navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const input = audioContext.createMediaStreamSource(stream);
            recorder = new Recorder(input, { numChannels: 1 });

            document.getElementById('status').textContent = "Микрофон доступен.";

                document.getElementById('startRecording').addEventListener('click', () => {
                document.getElementById('status').textContent = "Микрофон доступен.Идет запись";
                recorder.record();
            });

            document.getElementById('stopRecording').addEventListener('click', () => {
                recorder.stop();
                    document.getElementById('status').textContent = "Микрофон доступен.Запись остановлена";
                recorder.exportWAV(async (blob) => {
                    const formData = new FormData();
                    formData.append('audio', blob, 'recording.wav');

                    const response = await fetch('/api/audio/upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        const responseText = await response.text();
                        document.getElementById('speach').textContent = responseText;
                    } else {
                            document.getElementById('speach').textContent = await response.text();
                    }
                });
            });
        })
        .catch(error => {
            console.error('Error accessing microphone', error);
        });

    });

    document.getElementById('cancelMicrophoneAccess').addEventListener('click', () => {
        navigator.mediaDevices.getUserMedia({ audio: false })
        document.getElementById('status').textContent = "Микрофон отключен.";      
    });
</script> *@

<script>
    let recorder;
    let audioChunks = [];

    document.getElementById('requestMicrophoneAccess').addEventListener('click', () => {

        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const input = audioContext.createMediaStreamSource(stream);
                recorder = new Recorder(input, { numChannels: 1 });

                document.getElementById('startRecording').disabled = false;
                document.getElementById('stopRecording').disabled = false;
                document.getElementById('status').textContent = "Микрофон доступен.";
            })
            .catch(error => {
                console.error('Error accessing microphone', error);
            });
    });
     function startRecording(){
                    document.getElementById('status').textContent = "Микрофон доступен.Идет запись";
                    recorder.record();
     }

    function stopRecording() {
                    recorder.stop();
                    document.getElementById('status').textContent = "Микрофон доступен.Запись остановлена";
                    recorder.exportWAV(async (blob) => {
                        const formData = new FormData();
                        formData.append('audio', blob, 'recording.wav');

                        const response = await fetch('/api/audio/upload', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            const responseText = await response.text();
                            document.getElementById('speach').textContent = responseText;
                        } else {
                            document.getElementById('speach').textContent = await response.text();
                        }
                    });
    }
           
           

   

    document.getElementById('cancelMicrophoneAccess').addEventListener('click', () => {
        navigator.mediaDevices.getUserMedia({ audio: false });
        document.getElementById('status').textContent = "Микрофон отключен.";
        document.getElementById('startRecording').disabled = true;
        document.getElementById('stopRecording').disabled = true;
    });
</script>
