@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Добро пожаловать в  SpeechTranslator </h1>

    <button id="requestMicrophoneAccess">Разрешите доступ к микрофону</button>
    <button id="cancelMicrophoneAccess">Запретить доступ к микрофону</button>
</div>

<p id="status" style="color:red">Микрофон отключен.</p>
@model SpeachWriterMVC.Models.MyText

<p>@Model.text</p>

<button id="startRecording" onclick="startRecording()" >Запись</button>

<br /><span id="speach"></span>
<h3 id="speachtrans"></h3>


<script src="js/recorder.js"></script>
<script>
    let recorder;
    let audioChunks = [];

    document.getElementById('requestMicrophoneAccess').addEventListener('click', () => {

        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const input = audioContext.createMediaStreamSource(stream);
                recorder = new Recorder(input, { numChannels: 1 });
              
                document.getElementById('status').textContent = "Микрофон доступен.";
            })
            .catch(error => {
                console.error('Error accessing microphone', error);
            });
    });
     function startRecording(){

     }


    document.getElementById('cancelMicrophoneAccess').addEventListener('click', () => {
        location.reload();
    });


    document.getElementById("startRecording").addEventListener("mouseup", function (event) {
       
            recorder.stop();
            document.getElementById('status').textContent = "Микрофон доступен. Запись остановлена. Обрабатывается голос в текст.";
            recorder.exportWAV(async (blob) => {
                const formData = new FormData();
                formData.append('audio', blob, 'recording.wav');

                const response = await fetch('/api/audio/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                const originalString = await response.text();
                const parts = originalString.split('&', 2);
                document.getElementById('speach').textContent = parts[0];
                document.getElementById('speachtrans').textContent = parts[1];
                } else {
                    document.getElementById('speach').textContent = await response.text();
                }
            });
    });

    document.getElementById("startRecording").addEventListener("mousedown", function (event) {

        document.getElementById('status').textContent = "Микрофон доступен.Идет запись";
        recorder.record();  
           
    });

</script>
